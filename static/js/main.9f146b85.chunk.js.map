{"version":3,"sources":["Components/App/video.mp4","Components/App/photo.jpg","Components/SearchButton/SearchButton.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchButton","props","handleClick","componentDidMount","state","lat","lon","bind","fetch","then","res","json","data","setState","iss_position","latitude","longitude","console","log","className","this","onClick","React","Component","App","autoPlay","loop","muted","photo","src","video","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,sNCuC5BC,G,wDAlCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAmBVC,YAAc,WACV,EAAKC,qBAnBL,EAAKC,MAAQ,CACTC,IAAK,GACLC,IAAK,IAET,EAAKJ,YAAc,EAAKA,YAAYK,KAAjB,gBANJ,E,gEASE,IAAD,OAChBC,MAAM,2CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CACtBR,IAAKO,EAAKE,aAAaC,SACvBT,IAAKM,EAAKE,aAAaE,WAEvBC,QAAQC,IAAIN,S,+BASlB,OACI,6BACI,uBAAGO,UAAU,UAAb,oCAAwDC,KAAKhB,MAAMC,IAAnE,MAA2Ee,KAAKhB,MAAME,IAAtF,MACA,4BAAQa,UAAU,YAAYE,QAASD,KAAKlB,aAA5C,e,GA9BWoB,IAAMC,Y,gCCqBlBC,E,uKAdX,OACE,yBAAKL,UAAU,OACb,2BAAOA,UAAU,WAAWM,UAAQ,EAACC,MAAI,EAACC,OAAK,EAACC,MAAOA,KACnD,4BAAQC,IAAKC,IAAOC,KAAK,eAE7B,yBAAKZ,UAAU,WACb,4EACA,kBAAC,EAAD,Y,GAXQG,IAAMC,WCMJS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.9f146b85.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/video.bfef1d6d.mp4\";","module.exports = __webpack_public_path__ + \"static/media/photo.b2c65c8a.jpg\";","import React from 'react';\r\nimport './SearchButton.css';\r\n\r\nclass SearchButton extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            lat: '',\r\n            lon: ''\r\n        };\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('http://api.open-notify.org/iss-now.json')\r\n        .then(res => res.json())\r\n        .then(data => this.setState({\r\n              lat: data.iss_position.latitude,\r\n              lon: data.iss_position.longitude\r\n        },\r\n              console.log(data)\r\n        ))\r\n      };\r\n      \r\n    handleClick = () => {\r\n        this.componentDidMount();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p className=\"result\">The space station is located at: {this.state.lat} , {this.state.lon} .</p>\r\n                <button className=\"btn first\" onClick={this.handleClick}>UPDATE</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchButton;","import React from 'react';\nimport './App.css';\nimport SearchButton from '../SearchButton/SearchButton';\nimport video from './video.mp4';\nimport photo from './photo.jpg';\n\nclass App extends React.Component {\n  \n\n  render() {\n    return(\n      <div className=\"App\">\n        <video className='videoTag' autoPlay loop muted photo={photo}>\n            <source src={video} type='video/mp4' />\n        </video>\n        <div className=\"content\">\n          <h1>International Space Station Current Location</h1>\n          <SearchButton/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}